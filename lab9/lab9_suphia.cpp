/*
* This C++ program creates two sets of alphabets. One is regular (7 x 5) and one is bolded (8 x 8).
* This program allows the user to enter a message and display their message using the created alphabets.
* CECS 275 - Fall 2025
* @authors Ana Jolynn Arante, Suphia Sidiqi
* @version 1.0.0
*/

#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
#include <cstring>
#include  "lab9_functionsSuphia.h"

using namespace std;

 // this array is the size of bolded letters 
 // 26 rows and 8 columns ( 8x8 letters)
const int rows_bold = 26;    // 26 letters in the alphabet
const int columns_bold = 8;  // the width of the letters is 8 bits
const int rows_reg = 26;
const int columns_reg = 7;

int main()
{

// arrays for both types of alphabets 
//////////////////////////////////////////////////////////////////////////////////
    const int Reg_AlphData[rows_reg][columns_reg]= {
    // Letter A
    { 0x08, 0x14, 0x22, 0x22, 0x7C, 0x22, 0x22 },
    // Letter B
    { 0x3E, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x3E },
    // Letter C
    { 0x3E, 0x22, 0x20, 0x20, 0x20, 0x22, 0x3E },
    // Letter D
    { 0x3C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3C },
    // Letter E
    { 0x3E, 0x20, 0x20, 0x38, 0x20, 0x20, 0x3E },
    // Letter F
    { 0x3E, 0x20, 0x20, 0x38, 0x20, 0x20, 0x20 },
    // Letter G
    { 0x3E, 0x20, 0x20, 0x20, 0x26, 0x22, 0x3C },
    // Letter H
    { 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22 },
    // Letter I
    { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E },
    // Letter J
    { 0x3E, 0x08, 0x08, 0x08, 0x28, 0x28, 0x38 },
    // Letter K
    { 0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22},
    // Letter L
    { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E },
    // Letter M
    { 0x22, 0x36, 0x2A, 0x22, 0x22, 0x22, 0x22 },
    // Letter N
    { 0x32, 0x2A, 0x26, 0x22, 0x22, 0x22, 0x22 },
    // Letter O
    { 0x3E, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3E },
    // Letter P
    { 0x3E, 0x22, 0x22, 0x3E, 0x20, 0x20, 0x20 },
    // Letter Q 
    { 0x3E, 0x22, 0x22, 0x22, 0x2A, 0x24, 0x3A },
    // Letter R
    { 0x3E, 0x22, 0x3E, 0x30, 0x28, 0x28, 0x22 },
    // Letter S
    { 0x3E, 0x22, 0x40, 0x38, 0x06, 0x22, 0x3E },
    // Letter T
    { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },
    // Letter U
    { 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C },
    // Letter V
    { 0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08 },
    // Letter W 
    { 0x22, 0x22, 0x22, 0x22, 0x2A, 0x36, 0x22 },
    // Letter X
    { 0x22, 0x14, 0x08, 0x08, 0x14, 0x22, 0x22 },
    // Letter Y 
    { 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08 },
    // Letter Z
    { 0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E }
    };

    const int Bold_AlphaData[rows_bold][columns_bold] = {  
        // Bold A 
        { 0x3C, 0x66, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3 },
        // Bold B
        { 0xFE, 0xC1, 0xFE, 0xFF, 0xFF, 0xE3, 0xC3, 0xFE },
        // Bold C
        { 0x7E, 0xFF, 0xC3, 0xC0, 0xC0, 0xC3, 0xFF, 0x7E },
        // Bold D
        { 0xFE, 0xC7, 0xC3, 0xC3, 0xC3, 0xC3, 0xC7, 0xFE },
        // Bold E
        { 0xFF, 0xFF, 0xC0, 0xFC, 0xFC, 0xC0, 0xFF, 0xFF },
        // Bold F
        { 0xFF, 0xFF, 0xC0, 0xFC, 0xFC, 0xC0, 0xC0, 0xC0 },
        // Bold G
        { 0x7E, 0xFF, 0xC3, 0xC0, 0xC7, 0xC3, 0xFF, 0x7E },
        // Bold H
        { 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3 },
        // Bold I
        { 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF },
        // Bold J
        { 0x3F, 0x3F, 0x0C, 0x0C, 0xCC, 0xCC, 0xFC, 0x78 },
        // Bold K
        { 0xC3, 0xC6, 0xCC, 0xF0, 0xD8, 0xCC, 0xC6, 0xC3 },
        // Bold L
        { 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF },
        // Bold M
        { 0xC3, 0xEF, 0xFB, 0xD3, 0xC3, 0xC3, 0xC3, 0xC3 },
        // Bold N
        { 0xC3, 0xF3, 0xFB, 0xDF, 0xCF, 0xC3, 0xC3, 0xC3 },
        // Bold O
        { 0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E },
        // Bold P
        { 0xFE, 0xFF, 0xC3, 0xFF, 0xFE, 0xC0, 0xC0, 0xC0 },
        // Bold Q
        { 0x7E, 0xFF, 0xC3, 0xC3, 0xDB, 0xFF, 0x7F, 0x18 },
        // Bold R
        { 0xFE, 0xFF, 0xC3, 0xFF, 0xFE, 0xDC, 0xCE, 0xC7 },
        // Bold S
        { 0x7E, 0xFF, 0xC3, 0x78, 0x1E, 0xC3, 0xFF, 0x7E },
        // Bold T
        { 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 },
        // Bold U
        { 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C },
        // Bold V
        { 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x18 },
        // Bold W
        { 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0x7E, 0x66 },
        // Bold X
        { 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x66, 0xC3 },
        // Bold Y
        { 0xC3, 0xE7, 0x7E, 0x3C, 0x18, 0x18, 0x18, 0x18 },
        // Bold Z
        { 0xFF, 0xFF, 0x07, 0x0E, 0x38, 0xE0, 0xFF, 0xFF }
    };
//////////////////////////////////////////////////////////////////////////////////
// use switch statements for user to choose 

string message;
cout << "Enter a message: ";
getline(cin, message);
int choice;
cout << "\nHello! Choose between the following options: " << endl;
cout << " 1. Show message in a regular font" << endl;
cout << " 2. Show message in a bold font" << endl;
cout << "Enter choice: ";
cin >> choice;

// testing to display the letter 
//int* letterA = (int*)BoldAlphabet[0]; // i was testing each index to see what it displays
// still dont know how to display a whole message im leaving that for now 
// ...existing code..
// Convert message to uppercase and filter only letters
// run through this loop first to fill the vector with the letters side by side 

switch (choice)
{
    case 1: // user chooses regular font
    {
        cout << endl;
        PrintRegAlphabet((int*)Reg_AlphData, rows_reg, columns_reg, message);
        break;
    }  

    case 2: // user chooses bold font 
    {
        cout << endl;
        PrintBoldAlphabet((int*)Bold_AlphaData, rows_bold, columns_bold, message);
        break;
    }

    }
}
    


